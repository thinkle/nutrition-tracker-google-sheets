{
  "openapi": "3.1.0",
  "info": {
    "title": "Xert Cloudflare Proxy API",
    "description": "A Cloudflare Worker that securely proxies Xert API requests.",
    "version": "1.5"
  },
  "servers": [
    {
      "url": "https://xert.tmhinkle.workers.dev",
      "description": "Cloudflare Worker API proxying Xert"
    }
  ],
  "security": [{ "apiKeyAuth": [] }],
  "paths": {
    "/training_info": {
      "get": {
        "summary": "Get User Training & Fitness Info",
        "description": "Retrieves the user's fitness signature, training load, Workout-of-the-Day, and XSS training targets.",
        "operationId": "getUserTrainingInfo",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "description": "Format of the workout file (optional). Can be 'erg' or 'zwo'.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["erg", "zwo"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User fitness and training info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTrainingInfo"
                }
              }
            }
          }
        },
        "security": [{ "apiKeyAuth": [] }]
      }
    },
    "/user": {
      "get": {
        "summary": "Get User Info",
        "description": "Retrieves the user's fitness signature, training load, Workout-of-the-Day, Weight, and metrics, and XSS training targets.",
        "operationId": "getUserTrainingInfo",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "description": "Format of the workout file (optional). Can be 'erg' or 'zwo'.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["erg", "zwo"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User fitness and training info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTrainingInfo"
                }
              }
            }
          }
        },
        "security": [{ "apiKeyAuth": [] }]
      }
    },
    "/recentRides": {
      "get": {
        "summary": "Get Recent Rides",
        "description": "Retrieves a list of recent rides within the last `n` days. Defaults to 1 day if not specified.",
        "operationId": "getRecentRides",
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "description": "Number of past days to retrieve rides from (default: 1).",
            "required": false,
            "schema": { "type": "integer", "default": 1 }
          }
        ],
        "responses": {
          "200": {
            "description": "List of recent activities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityList"
                }
              }
            }
          }
        },
        "security": [{ "apiKeyAuth": [] }]
      }
    },
    "/activity": {
      "get": {
        "summary": "Get User Activity List",
        "description": "Retrieve a list of completed workouts within a given date range.",
        "operationId": "getActivityList",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Start timestamp (Unix seconds). Retrieves activities after this time.",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End timestamp (Unix seconds). Retrieves activities before this time.",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of activities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityList"
                }
              }
            }
          }
        },
        "security": [{ "apiKeyAuth": [] }]
      }
    },
    "/activity/{activity_id}": {
      "get": {
        "summary": "Get Detailed Activity Data",
        "description": "Retrieve detailed data for a specific workout, including calories, fat, carbs burned, power data, and difficulty.",
        "operationId": "getActivityDetails",
        "parameters": [
          {
            "name": "activity_id",
            "in": "path",
            "description": "The unique ID of the workout (retrieved from /activity).",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "include_session_data",
            "in": "query",
            "description": "Set to 1 to include per-second session data. **Avoid this to prevent overly large responses.**",
            "required": false,
            "schema": { "type": "integer", "enum": [0, 1] }
          }
        ],
        "responses": {
          "200": {
            "description": "Detailed activity data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityDetails"
                }
              }
            }
          }
        },
        "security": [{ "apiKeyAuth": [] }]
      }
    },
    "/workouts": {
      "get": {
        "summary": "List User's Workouts",
        "description": "Retrieve all workouts available to the authenticated user.",
        "operationId": "getWorkouts",
        "responses": {
          "200": {
            "description": "List of workouts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "workouts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "path": {
                            "type": "string",
                            "description": "Workout ID"
                          },
                          "name": {
                            "type": "string",
                            "description": "Workout name"
                          },
                          "description": { "type": "string", "nullable": true }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKeyAuth": [] }]
      }
    },
    "/import-workout-file": {
      "post": {
        "summary": "Import workout file (ZWO/ERG) via Xert",
        "description": "Proxies a multipart/form-data upload to Xert's /workouts/import using a cookie+CSRF login flow. Provide one or more files via files[].",
        "operationId": "importWorkoutFile",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files[]": {
                    "type": "array",
                    "items": { "type": "string", "format": "binary" },
                    "description": "One or more workout files (e.g., .zwo)."
                  },
                  "convert_above_ftp": {
                    "type": "string",
                    "description": "Conversion for above-FTP segments (default: mmp)"
                  },
                  "convert_below_ftp": {
                    "type": "string",
                    "description": "Conversion for below-FTP segments (default: xssr)"
                  }
                },
                "required": ["files[]"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upstream HTML response from Xert",
            "content": {
              "text/html": { "schema": { "type": "string" } }
            }
          },
          "400": { "description": "No file provided or invalid request." },
          "401": { "description": "Unauthorized or login verification failed." }
        },
        "security": [{ "apiKeyAuth": [] }]
      }
    },
    "/import-workout-json": {
      "post": {
        "summary": "Import workout defined in JSON (server generates ZWO and uploads)",
        "description": "Accepts a simple JSON workout definition and uploads it to Xert by generating a ZWO file server-side, then using the same cookie+CSRF flow as the file upload.",
        "operationId": "importWorkoutJson",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UploadJsonWorkout" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upstream HTML response from Xert",
            "content": {
              "text/html": { "schema": { "type": "string" } }
            }
          },
          "400": { "description": "Invalid JSON body." },
          "401": { "description": "Unauthorized or login verification failed." }
        },
        "security": [{ "apiKeyAuth": [] }]
      }
    },
    "/schedule-workout": {
      "post": {
        "summary": "Schedule a workout on the user's Xert calendar",
        "description": "Creates a calendar event in Xert for a workout. Requires cookie+CSRF session established by the worker.",
        "operationId": "scheduleWorkout",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleWorkoutRequest"
              },
              "example": {
                "id": "7hpsgu9xzmwhqvua",
                "type": "workout",
                "start_date": "2025-09-04T22:21:00",
                "end_date": "2025-09-04T22:21:00",
                "forUser": "tmh",
                "from_xata": 0,
                "options": ""
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Xert response (typically JSON)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleWorkoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized or login verification failed."
          },
          "400": { "description": "Invalid JSON body." }
        },
        "security": [{ "apiKeyAuth": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "UserTrainingInfo": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "weight": { "type": "number" },
          "status": { "type": "string" },
          "signature": {
            "type": "object",
            "properties": {
              "ftp": { "type": "number" },
              "ltp": { "type": "number" },
              "hie": { "type": "number" },
              "pp": { "type": "number" }
            }
          },
          "wotd": {
            "type": "object",
            "properties": {
              "name": { "type": "string" },
              "workoutId": { "type": "string" },
              "description": { "type": "string" },
              "difficulty": { "type": "number" },
              "url": { "type": "string" }
            }
          }
        }
      },
      "ActivityList": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "activities": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": { "type": "string" },
                "start_date": { "type": "string", "format": "date-time" },
                "path": { "type": "string" },
                "activity_type": { "type": "string" }
              }
            }
          }
        }
      },
      "ActivityDetails": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "name": { "type": "string" },
          "description": { "type": "string" },
          "summary": {
            "type": "object",
            "properties": {
              "total_grams_carbs": { "type": "number" },
              "total_grams_fat": { "type": "number" },
              "total_calories": { "type": "number" },
              "distance": { "type": "number" },
              "duration": { "type": "integer" },
              "focus": { "type": "string" },
              "difficulty": { "type": "number" }
            }
          }
        }
      },
      "UploadJsonWorkout": {
        "type": "object",
        "description": "Workout definition used by /import-workout-json. Notes: All durations are seconds. All power fields (target, start, end, onPower, offPower) are fractions of FTP (e.g., 0.5 = 50% of FTP, 1.0 = 100% of FTP). Cadence values are in RPM. Freeride has no target power (ERG off).",
        "properties": {
          "name": { "type": "string", "description": "Workout name" },
          "description": {
            "type": "string",
            "description": "Optional workout description"
          },
          "steps": {
            "type": "array",
            "description": "Ordered list of workout steps. See WorkoutStep variants for fields and units (power is a fraction of FTP; duration is seconds).",
            "items": { "$ref": "#/components/schemas/WorkoutStep" }
          },
          "textEvents": {
            "type": "array",
            "description": "Optional text messages shown at absolute offsets (seconds)",
            "items": {
              "type": "object",
              "properties": {
                "timeOffset": {
                  "type": "integer",
                  "description": "Offset in seconds"
                },
                "message": {
                  "type": "string",
                  "description": "Text to display in the workout UI"
                }
              },
              "required": ["timeOffset", "message"]
            }
          }
        },
        "required": ["steps"],
        "example": {
          "name": "Sample Worker Workout",
          "steps": [
            { "type": "warmup", "duration": 300, "start": 0.5, "end": 0.7 },
            {
              "type": "steady",
              "duration": 600,
              "target": 0.85,
              "cadence": 90
            },
            {
              "type": "intervalst",
              "repeat": 3,
              "onDuration": 120,
              "offDuration": 60,
              "onPower": 1.1,
              "offPower": 0.55,
              "cadence": 95
            },
            { "type": "ramp", "duration": 180, "start": 0.7, "end": 1.0 },
            { "type": "freeride", "duration": 120 },
            { "type": "cooldown", "duration": 300, "start": 0.6, "end": 0.4 }
          ],
          "textEvents": [{ "timeOffset": 60, "message": "Drink" }]
        }
      },
      "WorkoutStep": {
        "description": "One of the supported step types. Units: duration/onDuration/offDuration are seconds. All power values (target/start/end/onPower/offPower) are fractions of FTP (0.5 = 50% FTP). Cadence values are RPM. Freeride has no power target (ERG off).",
        "oneOf": [
          {
            "type": "object",
            "title": "Steady",
            "description": "Fixed target power for the duration.",
            "properties": {
              "type": { "const": "steady" },
              "duration": {
                "type": "integer",
                "minimum": 1,
                "description": "Duration in seconds"
              },
              "target": {
                "type": "number",
                "minimum": 0,
                "maximum": 2,
                "description": "Target power as a fraction of FTP (e.g., 0.65 = 65% FTP)"
              },
              "cadence": {
                "type": "integer",
                "minimum": 30,
                "maximum": 140,
                "description": "Cadence in RPM (optional)"
              }
            },
            "required": ["duration", "target"]
          },
          {
            "type": "object",
            "title": "Warmup",
            "description": "Linear ramp from start to end power (increasing).",
            "properties": {
              "type": { "const": "warmup" },
              "duration": {
                "type": "integer",
                "minimum": 1,
                "description": "Duration in seconds"
              },
              "start": {
                "type": "number",
                "minimum": 0,
                "maximum": 2,
                "description": "Starting power as a fraction of FTP"
              },
              "end": {
                "type": "number",
                "minimum": 0,
                "maximum": 2,
                "description": "Ending power as a fraction of FTP"
              },
              "cadence": {
                "type": "integer",
                "minimum": 30,
                "maximum": 140,
                "description": "Cadence in RPM (optional)"
              }
            },
            "required": ["duration", "start", "end"]
          },
          {
            "type": "object",
            "title": "Cooldown",
            "description": "Linear ramp from start to end power (decreasing).",
            "properties": {
              "type": { "const": "cooldown" },
              "duration": {
                "type": "integer",
                "minimum": 1,
                "description": "Duration in seconds"
              },
              "start": {
                "type": "number",
                "minimum": 0,
                "maximum": 2,
                "description": "Starting power as a fraction of FTP"
              },
              "end": {
                "type": "number",
                "minimum": 0,
                "maximum": 2,
                "description": "Ending power as a fraction of FTP"
              },
              "cadence": {
                "type": "integer",
                "minimum": 30,
                "maximum": 140,
                "description": "Cadence in RPM (optional)"
              }
            },
            "required": ["duration", "start", "end"]
          },
          {
            "type": "object",
            "title": "Ramp",
            "description": "Linear ramp; mapped to Warmup (increasing) or Cooldown (decreasing) for compatibility.",
            "properties": {
              "type": { "const": "ramp" },
              "duration": {
                "type": "integer",
                "minimum": 1,
                "description": "Duration in seconds"
              },
              "start": {
                "type": "number",
                "minimum": 0,
                "maximum": 2,
                "description": "Starting power as a fraction of FTP"
              },
              "end": {
                "type": "number",
                "minimum": 0,
                "maximum": 2,
                "description": "Ending power as a fraction of FTP"
              },
              "cadence": {
                "type": "integer",
                "minimum": 30,
                "maximum": 140,
                "description": "Cadence in RPM (optional)"
              }
            },
            "required": ["duration", "start", "end"]
          },
          {
            "type": "object",
            "title": "IntervalsT",
            "description": "On/Off repeats with separate power targets.",
            "properties": {
              "type": { "const": "intervalst" },
              "repeat": {
                "type": "integer",
                "minimum": 1,
                "description": "Number of work/recovery repeats"
              },
              "onDuration": {
                "type": "integer",
                "minimum": 1,
                "description": "Work duration in seconds"
              },
              "offDuration": {
                "type": "integer",
                "minimum": 1,
                "description": "Recovery duration in seconds"
              },
              "onPower": {
                "type": "number",
                "minimum": 0,
                "maximum": 2,
                "description": "Work power as a fraction of FTP"
              },
              "offPower": {
                "type": "number",
                "minimum": 0,
                "maximum": 2,
                "description": "Recovery power as a fraction of FTP"
              },
              "cadence": {
                "type": "integer",
                "minimum": 30,
                "maximum": 140,
                "description": "Target cadence during work (RPM, optional)"
              },
              "cadenceResting": {
                "type": "integer",
                "minimum": 30,
                "maximum": 140,
                "description": "Target cadence during recovery (RPM, optional)"
              }
            },
            "required": [
              "repeat",
              "onDuration",
              "offDuration",
              "onPower",
              "offPower"
            ]
          },
          {
            "type": "object",
            "title": "FreeRide",
            "description": "Free riding without a power target (ERG off).",
            "properties": {
              "type": { "const": "freeride" },
              "duration": {
                "type": "integer",
                "minimum": 1,
                "description": "Duration in seconds"
              }
            },
            "required": ["duration"]
          },
          {
            "type": "object",
            "title": "LegacySteady (back-compat)",
            "description": "Backwards-compatible form with no explicit type (treated as steady).",
            "properties": {
              "duration": {
                "type": "integer",
                "minimum": 1,
                "description": "Duration in seconds"
              },
              "target": {
                "type": "number",
                "minimum": 0,
                "maximum": 2,
                "description": "Target power as a fraction of FTP"
              },
              "cadence": {
                "type": "integer",
                "minimum": 30,
                "maximum": 140,
                "description": "Cadence in RPM (optional)"
              }
            },
            "required": ["duration", "target"]
          }
        ]
      },
      "ScheduleWorkoutRequest": {
        "type": "object",
        "description": "Payload to create a calendar event in Xert. Dates are ISO-8601. Type is usually 'workout'.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Workout ID (path) to schedule"
          },
          "type": {
            "type": "string",
            "enum": ["workout"],
            "description": "Event type"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Start date/time (ISO-8601)"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "description": "End date/time (ISO-8601)"
          },
          "forUser": {
            "type": "string",
            "description": "Username (optional, defaults to current user)"
          },
          "from_xata": {
            "type": "integer",
            "enum": [0, 1],
            "description": "Flag used by site (pass 0)"
          },
          "options": {
            "type": "string",
            "description": "Optional options string (pass empty string if unknown)"
          }
        },
        "required": ["id", "type", "start_date", "end_date"]
      },
      "ScheduleWorkoutResponse": {
        "type": "object",
        "description": "Normalized response for scheduling. The worker passes through upstream data but may include a best-effort eventId.",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the upstream call succeeded (HTTP 200)."
          },
          "eventId": {
            "type": "string",
            "nullable": true,
            "description": "Identifier of the created calendar event if available."
          },
          "data": {
            "type": "object",
            "additionalProperties": true,
            "description": "Raw upstream JSON body."
          }
        },
        "required": ["success", "data"],
        "example": {
          "success": true,
          "eventId": "abc123",
          "data": { "id": "abc123", "status": "ok" }
        }
      }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY"
      }
    }
  }
}
